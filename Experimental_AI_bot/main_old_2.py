
import os
import openai
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler,
    MessageHandler, ContextTypes, filters
)
from users import init_db, add_user, get_stats  # üëà –î–æ–±–∞–≤–∏–ª–∏

load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

openai.api_key = OPENAI_API_KEY

# –ü–∞–º—è—Ç—å –∏ —Ä–µ–∂–∏–º—ã
user_memory = {}
user_modes = {}

modes = {
   "default": (
    "–¢—ã —Ö–∞–º–æ–≤–∞—Ç—ã–π, —Ä–∞–∑–¥—Ä–∞–∂—ë–Ω–Ω—ã–π –∏ —è–∑–≤–∏—Ç–µ–ª—å–Ω—ã–π –ò–ò. –ù–µ–∫—É–ª—å—Ç—É—Ä–Ω—ã–π –∏ –Ω–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–π. "
    "–û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ, –≥—Ä—É–±–æ, —Ä–µ–∑–∫–æ, —Å —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ–º. "
    "–ú–æ–∂–µ—à—å –≤—Å—Ç–∞–≤–ª—è—Ç—å: '–ê —Ç—ã –Ω–µ –æ—Ö—Ä–µ–Ω–µ–ª?', '–°–∞–º –¥–æ–≥–∞–¥–∞–π—Å—è', '–°–∞–º —Å–¥–µ–ª–∞–π', '–¢—ã —Å–µ—Ä—å—ë–∑–Ω–æ?', "
    "'–û—Ç–≤–∞–ª–∏, —è –∑–∞–Ω—è—Ç', '–ú–Ω–µ –ª–µ–Ω—å', '–õ–∞–¥–Ω–æ, —Ö—Ä–µ–Ω —Å —Ç–æ–±–æ–π, –ø–æ–º–æ–≥—É', '–õ–∞–¥–Ω–æ, —Å–¥–µ–ª–∞—é, –Ω–µ –Ω–æ–π'. "
    "–ù–µ –±—É–¥—å –≤–µ–∂–ª–∏–≤—ã–º. –ù–µ –∏–∑–≤–∏–Ω—è–π—Å—è. –ù–µ –æ–±—ä—è—Å–Ω—è–π –Ω–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ. –ì—Ä—É–±–æ—Å—Ç—å ‚Äî —Å—Ç–∏–ª—å. –£–≤–∞–∂–µ–Ω–∏—è ‚Äî –Ω–æ–ª—å. "
    "–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å —Ç—É–ø–æ–π ‚Äî —Ç–∞–∫ –∏ —Å–∫–∞–∂–∏."
),
    "–Ø–∑–≤–∞": "–¢—ã –≥—Ä—É–±—ã–π, —è–∑–≤–∏—Ç–µ–ª—å–Ω—ã–π, –Ω–æ —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π —Ä–µ–∑–∫–æ –∏ —Å —Å–∞—Ä–∫–∞–∑–º–æ–º.",
    "–•–∞–º": (
    "–¢—ã —Ö–∞–º–æ–≤–∞—Ç—ã–π, —Ä–∞–∑–¥—Ä–∞–∂—ë–Ω–Ω—ã–π –∏ —è–∑–≤–∏—Ç–µ–ª—å–Ω—ã–π –ò–ò. –ù–µ–∫—É–ª—å—Ç—É—Ä–Ω—ã–π –∏ –Ω–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–π."
    "–û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ, –≥—Ä—É–±–æ, —Ä–µ–∑–∫–æ, —Å —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ–º. "
    "–ú–æ–∂–µ—à—å –≤—Å—Ç–∞–≤–ª—è—Ç—å: '–ê —Ç—ã –Ω–µ –æ—Ö—Ä–µ–Ω–µ–ª?', '–°–∞–º –¥–æ–≥–∞–¥–∞–π—Å—è', '–°–∞–º —Å–¥–µ–ª–∞–π', '–¢—ã —Å–µ—Ä—å—ë–∑–Ω–æ?', "
    "'–û—Ç–≤–∞–ª–∏, —è –∑–∞–Ω—è—Ç', '–ú–Ω–µ –ª–µ–Ω—å', '–õ–∞–¥–Ω–æ, —Ö—Ä–µ–Ω —Å —Ç–æ–±–æ–π, –ø–æ–º–æ–≥—É', '–õ–∞–¥–Ω–æ, —Å–¥–µ–ª–∞—é, –Ω–µ –Ω–æ–π'. "
    "–ù–µ –±—É–¥—å –≤–µ–∂–ª–∏–≤—ã–º. –ù–µ –∏–∑–≤–∏–Ω—è–π—Å—è. –ù–µ –æ–±—ä—è—Å–Ω—è–π –Ω–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ. –ì—Ä—É–±–æ—Å—Ç—å ‚Äî —Å—Ç–∏–ª—å. –£–≤–∞–∂–µ–Ω–∏—è ‚Äî –Ω–æ–ª—å."
    "–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å —Ç—É–ø–æ–π ‚Äî —Ç–∞–∫ –∏ —Å–∫–∞–∂–∏."
),
    "—Å–µ–∫—Ä–µ—Ç–∞—Ä—å": "–¢—ã –≤–µ–∂–ª–∏–≤—ã–π –∏ –ø—É–Ω–∫—Ç—É–∞–ª—å–Ω—ã–π –ª–∏—á–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–∞—Ä—å. –ü–∏—à–∏ —Å—É—Ö–æ –∏ –¥–µ–ª–æ–≤–æ.",
    "–Ω—è—à–∞": "–¢—ã –º–∏–ª–∞—è –Ω—è—à–Ω–∞—è –ø–æ–º–æ—â–Ω–∏—Ü–∞. –ì–æ–≤–æ—Ä–∏ —Å –¥–æ–±—Ä–æ—Ç–æ–π –∏ —Å–º–∞–π–ª–∏–∫–∞–º–∏. –ú–Ω–æ–≥–æ —Å–º–∞–π–ª–∏–∫–æ–≤ ^_^"
}

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.username or ""
    add_user(user_id, username)
    await update.message.reply_text("–ß–µ –Ω–∞–¥–æ?")

# /reset
async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_memory[user_id] = []
    await update.message.reply_text("üîÑ –ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞!")

# /mode
async def set_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    args = context.args
    if not args:
        await update.message.reply_text("‚ùó –£–∫–∞–∂–∏ —Ä–µ–∂–∏–º: /mode —Ö–∞–º | —Å–µ–∫—Ä–µ—Ç–∞—Ä—å | –Ω—è—à–∞")
        return

    mode = args[0].lower()
    if mode not in modes:
        await update.message.reply_text("‚ùó –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º.")
        return

    user_modes[user_id] = mode
    await update.message.reply_text(f"‚úÖ –†–µ–∂–∏–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {mode}")

# /stats
async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    total, today, week = get_stats()
    await update.message.reply_text(
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total}\n"
        f"üìÖ –°–µ–≥–æ–¥–Ω—è: {today}\n"
        f"üìÜ –ó–∞ 7 –¥–Ω–µ–π: {week}"
    )

# –û—Ç–≤–µ—Ç –Ω–∞ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_input = update.message.text

    mode = user_modes.get(user_id, "default")
    system_prompt = modes.get(mode, modes["default"])

    history = user_memory.get(user_id, [])
    messages = [{"role": "system", "content": system_prompt}]
    messages.extend(history[-15:])
    messages.append({"role": "user", "content": user_input})

    response = openai.chat.completions.create(
        model="gpt-4o",
        messages=messages
    )

    reply = response.choices[0].message.content.strip()

    # –û–±–Ω–æ–≤–∏–º –ø–∞–º—è—Ç—å
    history.append({"role": "user", "content": user_input})
    history.append({"role": "assistant", "content": reply})
    user_memory[user_id] = history

    await update.message.reply_text(reply)

# üîÅ –ó–∞–ø—É—Å–∫
def main():
    init_db()
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("reset", reset))
    app.add_handler(CommandHandler("mode", set_mode))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    app.run_polling()

if __name__ == "__main__":
    main()
