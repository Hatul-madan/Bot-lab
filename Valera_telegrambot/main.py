import os
import openai
import json
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler,
    MessageHandler, ContextTypes, filters
)
from users import init_db, add_user, get_stats
from petrovich.main import Petrovich

# --- Petrovich instance
p = Petrovich()

load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY

# –ü–∞–º—è—Ç—å –∏ —Ä–µ–∂–∏–º—ã
user_memory = {}
user_modes = {}

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏–∑ —Ñ–∞–π–ª–∞
with open("characters.json", "r", encoding="utf-8") as f:
    modes = json.load(f)

def guess_gender(name):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–ª –ø–æ –∏–º–µ–Ω–∏, –∏—Å–ø–æ–ª—å–∑—É—è Petrovich."""
    if not name or len(name) < 2:
        return "unknown"
    gender = p.firstname.gender(name)
    if gender not in ("male", "female"):
        return "unknown"
    return gender

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.username or ""
    first_name = update.effective_user.first_name or ""
    add_user(user_id, username)

    gender = guess_gender(first_name)
    # –î—É—Ä–∞–∫–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å: –∏–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ 2 —Å–∏–º–≤–æ–ª–æ–≤, –ø–æ–ª –æ–ø—Ä–µ–¥–µ–ª—ë–Ω
    if not first_name or len(first_name) < 2 or gender == "unknown":
        first_name = ""
        gender = "unknown"
    user_memory[user_id] = {
        "history": [],
        "name": first_name,
        "gender": gender,
        "asked_name": False
    }
    await update.message.reply_text("–ß–µ –Ω–∞–¥–æ?")

# /reset
async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    first_name = update.effective_user.first_name or ""
    gender = guess_gender(first_name)
    if not first_name or len(first_name) < 2 or gender == "unknown":
        first_name = ""
        gender = "unknown"
    user_memory[user_id] = {
        "history": [],
        "name": first_name,
        "gender": gender,
        "asked_name": False
    }
    await update.message.reply_text("üîÑ –ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞!\n–ß–µ –Ω–∞–¥–æ?")

# /mode
async def set_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    args = context.args
    if not args:
        await update.message.reply_text("‚ùó –£–∫–∞–∂–∏ —Ä–µ–∂–∏–º: /mode —Ö–∞–º | —Å–µ–∫—Ä–µ—Ç–∞—Ä—å | –Ω—è—à–∞")
        return

    mode = args[0].lower()
    if mode not in modes:
        await update.message.reply_text("‚ùó –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º.")
        return

    user_modes[user_id] = mode
    await update.message.reply_text(f"‚úÖ –†–µ–∂–∏–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {mode}")

# /stats
async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    total, today, week = get_stats()
    await update.message.reply_text(
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total}\n"
        f"üìÖ –°–µ–≥–æ–¥–Ω—è: {today}\n"
        f"üìÜ –ó–∞ 7 –¥–Ω–µ–π: {week}"
    )

# /reload_modes
async def reload_modes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global modes
    try:
        with open("characters.json", "r", encoding="utf-8") as f:
            modes = json.load(f)
        await update.message.reply_text(f"üîÅ –ü–µ—Ä—Å–æ–Ω–∞–∂–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç–∏–ª–µ–π: {len(modes)}")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {e}")

# --- –ò–º—è —é–∑–µ—Ä–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏ —Å—Ä–∞–∑—É)
async def handle_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_input = update.message.text.strip()
    gender = guess_gender(user_input)
    if gender == "unknown":
        user_memory[user_id]["name"] = ""
        user_memory[user_id]["gender"] = "unknown"
        user_memory[user_id]["asked_name"] = True
        await update.message.reply_text("–ò–º—è —á—Ç–æ-—Ç–æ —Å—Ç—Ä–∞–Ω–Ω–æ–µ. –ù–∞–∑–æ–≤–∏ —Å–µ–±—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ!")
        return
    user_memory[user_id]["name"] = user_input
    user_memory[user_id]["gender"] = gender
    user_memory[user_id]["asked_name"] = True
    await update.message.reply_text("–ü—Ä–∏–Ω—è—Ç–æ. –ß–µ –Ω–∞–¥–æ?")

# –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_input = update.message.text.strip()

    memory = user_memory.get(user_id)

    # 1. –ï—Å–ª–∏ –µ—â—ë –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω –ø–æ–ª, –∏ –∏–º—è –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ ‚Äî —É—Ç–æ—á–Ω—è–µ–º –∏–º—è (–Ω–æ –Ω–µ —Å—Ä–∞–∑—É!)
    if memory:
        if memory.get("gender", "unknown") == "unknown" and not memory.get("asked_name"):
            user_memory[user_id]["asked_name"] = True
            await update.message.reply_text("–ö—Å—Ç–∞—Ç–∏, —è –í–∞–ª–µ—Ä–∞. –ê —Ç–µ–±—è –∫–∞–∫ –∑–≤–∞—Ç—å?")
            return
        elif memory.get("gender", "unknown") == "unknown" and memory.get("asked_name"):
            await handle_name(update, context)
            return

    # --- –î–∞–ª—å—à–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –¥–∏–∞–ª–æ–≥, –∏–º—è –ù–ï –≤—Å—Ç–∞–≤–ª—è–µ–º, —Ç–æ–ª—å–∫–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏
    mode = user_modes.get(user_id, "default")
    system_prompt = modes.get(mode, modes["default"])

    history = memory.get("history", []) if memory else []
    messages = [{"role": "system", "content": system_prompt}]
    messages.extend(history[-15:])
    messages.append({"role": "user", "content": user_input})

    response = openai.chat.completions.create(
        model="gpt-4o",
        messages=messages
    )

    reply = response.choices[0].message.content.strip()

    if memory is not None:
        history.append({"role": "user", "content": user_input})
        history.append({"role": "assistant", "content": reply})
        user_memory[user_id]["history"] = history

    await update.message.reply_text(reply)

# --- –ó–∞–ø—É—Å–∫
def main():
    init_db()
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("reset", reset))
    app.add_handler(CommandHandler("mode", set_mode))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(CommandHandler("reload_modes", reload_modes))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    app.run_polling()

if __name__ == "__main__":
    main()
