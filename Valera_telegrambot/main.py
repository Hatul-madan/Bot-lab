import os
import openai
import json
import re
import random
from typing import Dict, List, TypedDict, Literal
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler,
    MessageHandler, ContextTypes, filters
)


class ChatMessage(TypedDict):
    role: Literal["system", "user", "assistant"]
    content: str


# --- INIT ---
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY


# --- –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª–æ–≤–∞—Ä—è –∏–º—ë–Ω ---
def load_name_gender_map() -> Dict[str, str]:
    try:
        with open("name_gender_map.json", "r", encoding="utf-8") as f:
            raw_map = json.load(f)
            name_map = {}
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º—É–∂—Å–∫–∏—Ö –∏–º—ë–Ω
            male_names = raw_map.get(
                "// –ú–£–ñ–°–ö–ò–ï –ò–ú–ï–ù–ê", {}
            )
            for full_name, variations in male_names.items():
                for name, gender in variations.items():
                    name_map[name.lower()] = gender
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∂–µ–Ω—Å–∫–∏—Ö –∏–º—ë–Ω
            female_names = raw_map.get(
                "// –ñ–ï–ù–°–ö–ò–ï –ò–ú–ï–ù–ê", {}
            )
            for full_name, variations in female_names.items():
                for name, gender in variations.items():
                    name_map[name.lower()] = gender
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã—Ö –∏–º—ë–Ω
            unknown_names = raw_map.get(
                "// –ò–ú–ï–ù–ê, –ö–û–¢–û–†–´–ï –ú–û–ì–£–¢ –ë–´–¢–¨ –ò –ú–£–ñ–°–ö–ò–ú–ò –ò –ñ–ï–ù–°–ö–ò–ú–ò", 
                {}
            )
            for full_name, variations in unknown_names.items():
                for name, gender in variations.items():
                    name_map[name.lower()] = gender
            
            return name_map
    except Exception as e:
        print(
            f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ name_gender_map.json: {e}. "
            "–ò—Å–ø–æ–ª—å–∑—É—é –±–∞–∑–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å."
        )
        return {
            "—Å–µ—Ä–≥–µ–π": "male", "–µ–≤–≥–µ–Ω–∏–π": "male", "–∞–ª–µ–∫—Å–∞–Ω–¥—Ä": "male",
            "–∞–Ω–Ω–∞": "female", "–º–∞—Ä–∏—è": "female", "–µ–ª–µ–Ω–∞": "female"
        }


# --- –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤ ---
def load_characters():
    try:
        with open("characters.json", "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        print("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ characters.json. –ò—Å–ø–æ–ª—å–∑—É—é –±–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç.")
        return {
            "valera": {
                "prompt": (
                    "–¢–µ–±—è –∑–æ–≤—É—Ç –í–∞–ª–µ—Ä–∞. –¢—ã –≥—Ä—É–±—ã–π, —Ä–∞–∑–¥—Ä–∞–∂—ë–Ω–Ω—ã–π, "
                    "–∏ —è–∑–≤–∏—Ç–µ–ª—å–Ω—ã–π –ò–ò. –û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ –∏ —Ä–µ–∑–∫–æ."
                ),
                "model": "gpt-4o",
                "temperature": 0.9
            }
        }


# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
name_gender_map = load_name_gender_map()
characters = load_characters()


# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
user_memory: Dict[int, List[ChatMessage]] = {}
user_gender: Dict[int, str] = {}
user_state: Dict[int, str] = {}
# –°—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
message_counter: Dict[int, int] = {}


def load_promo_messages() -> List[str]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ–º–æ-—Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open("promo_messages.json", "r", encoding="utf-8") as f:
            data = json.load(f)
            return data.get("messages", [])
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ promo_messages.json: {e}")
        return []


# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–æ-—Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
promo_messages = load_promo_messages()


def guess_gender_by_name(name: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–ª –ø–æ –∏–º–µ–Ω–∏ –∏–∑ —Å–ª–æ–≤–∞—Ä—è"""
    if not name:
        return "unknown"
    
    # –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ (–∏–º—è –±–µ–∑ —Ñ–∞–º–∏–ª–∏–∏)
    first_word = name.strip().split()[0] if name.strip() else ""
    clean_name = first_word.lower()
    
    return name_gender_map.get(clean_name, "unknown")


def extract_name_from_text(text: str) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º—è –∏–∑ —Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    text = text.strip()
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–º–µ–Ω–∏
    patterns = [
        r'–º–µ–Ω—è –∑–æ–≤—É—Ç\s+([–ê-–Ø–Å][–∞-—è—ë]+)',
        r'—è\s+([–ê-–Ø–Å][–∞-—è—ë]+)',
        r'–∑–æ–≤—É—Ç\s+([–ê-–Ø–Å][–∞-—è—ë]+)',
        r'\b([–ê-–Ø–Å][–∞-—è—ë]+)\b'
    ]
    
    for pattern in patterns:
        match = re.search(pattern, text, re.IGNORECASE)
        if match:
            name = match.group(1)
            # –ò—Å–∫–ª—é—á–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–ª–æ–≤–∞
            excluded = ['–º–µ–Ω—è', '–∑–æ–≤—É—Ç', '—Ç–µ–±—è', '–∫–∞–∫', '—á—Ç–æ', '–≥–¥–µ', '–∫–æ–≥–¥–∞']
            if name.lower() not in excluded:
                return name
    
    return ""


def detect_gender_from_response(text: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–ª –∏–∑ –ø—Ä—è–º–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
    text_lower = text.lower()
    
    male_words = ['–º–∞–ª—å—á–∏–∫', '–ø–∞—Ä–µ–Ω—å', '–º—É–∂—á–∏–Ω–∞', '—è –º–∞–ª—å—á–∏–∫', '—è –ø–∞—Ä–µ–Ω—å']
    female_words = ['–¥–µ–≤–æ—á–∫–∞', '–∂–µ–Ω—â–∏–Ω–∞', '–¥–µ–≤—É—à–∫–∞', '—è –¥–µ–≤–æ—á–∫–∞', '—è –¥–µ–≤—É—à–∫–∞']
    
    for word in male_words:
        if word in text_lower:
            return "male"
    
    for word in female_words:
        if word in text_lower:
            return "female"
    
    return "unknown"


def build_system_prompt(gender: str) -> str:
    """–°–æ–∑–¥–∞—ë—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å —É—á—ë—Ç–æ–º –ø–æ–ª–∞"""
    if gender == "male":
        gender_info = "–ü–æ–ª —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞: –º—É–∂—Å–∫–æ–π."
    elif gender == "female":
        gender_info = "–ü–æ–ª —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞: –∂–µ–Ω—Å–∫–∏–π."
    else:
        gender_info = "–ü–æ–ª —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ."
    
    # –ë–µ—Ä—ë–º –ø—Ä–æ–º–ø—Ç "valera" –∏–∑ characters.json
    char_config = characters.get("valera", {
        "prompt": [
            "–¢—ã –í–∞–ª–µ—Ä–∞, –≥—Ä—É–±—ã–π –ø–æ–º–æ—â–Ω–∏–∫."
        ]
    })
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—Ç—Ä–æ–∫–∏ –ø—Ä–æ–º–ø—Ç–∞
    base_prompt = " ".join(char_config["prompt"])
    
    return f"{base_prompt}\n{gender_info}"


# --- –ö–æ–º–∞–Ω–¥—ã ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.effective_user or not update.message:
        return
    
    user_id = update.effective_user.id
    first_name = update.effective_user.first_name or ""
    
    # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª –ø–æ –∏–º–µ–Ω–∏ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
    gender = guess_gender_by_name(first_name)
    user_gender[user_id] = gender
    user_memory[user_id] = []
    message_counter[user_id] = 0
    
    if gender in ["male", "female"]:
        user_state[user_id] = "determined"
    else:
        user_state[user_id] = "initial"
    
    await update.message.reply_text("–ß–µ –Ω–∞–¥–æ?")


async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.effective_user or not update.message:
        return
    
    user_id = update.effective_user.id
    first_name = update.effective_user.first_name or ""
    
    # –û—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å –∏ —Å—á–µ—Ç—á–∏–∫
    user_memory[user_id] = []
    message_counter[user_id] = 0
    
    # –ó–∞–Ω–æ–≤–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª –ø–æ –∏–º–µ–Ω–∏ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
    gender = guess_gender_by_name(first_name)
    user_gender[user_id] = gender
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if gender in ["male", "female"]:
        user_state[user_id] = "determined"
    else:
        user_state[user_id] = "initial"
    
    await update.message.reply_text("üîÑ –ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞!\n–ß–µ –Ω–∞–¥–æ?")


# --- –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ---
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.effective_user or not update.message:
        return
    
    user_id = update.effective_user.id
    text = update.message.text
    if not text:
        return
    text = text.strip()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π
    if user_id not in user_state:
        user_state[user_id] = "initial"
        user_gender[user_id] = "unknown"
        user_memory[user_id] = []
    
    state = user_state[user_id]
    gender = user_gender[user_id]
    
    # –õ–æ–≥–∏–∫–∞ –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º
    if state == "initial":
        # –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        user_memory[user_id].append({"role": "user", "content": text})
        response_text = await generate_response(user_id, text)
        await update.message.reply_text(response_text)
        user_state[user_id] = "waiting_name"
        
    elif state == "waiting_name":
        # –í—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è
        user_memory[user_id].append({"role": "user", "content": text})
        response_text = await generate_response(user_id, text)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –æ–± –∏–º–µ–Ω–∏
        full_response = (
            f"{response_text}\n\n"
            "–ö—Å—Ç–∞—Ç–∏, —è –í–∞–ª–µ—Ä–∞. –ê —Ç–µ–±—è –∫–∞–∫ –∑–≤–∞—Ç—å?"
        )
        await update.message.reply_text(full_response)
        user_state[user_id] = "analyzing_name"
        
    elif state == "analyzing_name":
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ–± –∏–º–µ–Ω–∏
        user_memory[user_id].append({"role": "user", "content": text})
        
        extracted_name = extract_name_from_text(text)
        if extracted_name:
            gender = guess_gender_by_name(extracted_name)
            user_gender[user_id] = gender
            
            if gender in ["male", "female"]:
                user_state[user_id] = "determined"
                await update.message.reply_text("–û–∫, –ø–æ–Ω—è–ª.")
                return
            else:
                user_state[user_id] = "waiting_gender"
                await update.message.reply_text(
                    "–ù–µ –ø–æ–Ω—è–ª. –≠—Ç–æ —Ç—ã –º–∞–ª—å—á–∏–∫, –∏–ª–∏ –¥–µ–≤–æ—á–∫–∞?"
                )
                return
        else:
            user_state[user_id] = "waiting_gender"
            await update.message.reply_text(
                "–ù–µ –ø–æ–Ω—è–ª. –≠—Ç–æ —Ç—ã –º–∞–ª—å—á–∏–∫, –∏–ª–∏ –¥–µ–≤–æ—á–∫–∞?"
            )
            return
            
    elif state == "waiting_gender":
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä—è–º–æ–π –æ—Ç–≤–µ—Ç –æ –ø–æ–ª–µ
        detected_gender = detect_gender_from_response(text)
        
        if detected_gender in ["male", "female"]:
            user_gender[user_id] = detected_gender
            user_state[user_id] = "determined"
            await update.message.reply_text("–û–∫, –ø–æ–Ω—è–ª.")
            return
        else:
            user_gender[user_id] = "unknown"
            user_state[user_id] = "determined"
            await update.message.reply_text("–õ–∞–¥–Ω–æ, —Ñ–∏–≥ —Å —Ç–æ–±–æ–π.")
            return
    
    elif state == "determined":
        # –û–±—ã—á–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ
        user_memory[user_id].append({"role": "user", "content": text})
        response_text = await generate_response(user_id, text)
        await update.message.reply_text(response_text)


async def generate_response(user_id: int, text: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å —É—á—ë—Ç–æ–º –ø–æ–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    gender = user_gender.get(user_id, "unknown")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    message_counter[user_id] = message_counter.get(user_id, 0) + 1
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    char_config = characters.get("valera", {
        "model": "gpt-4o",
        "temperature": 0.9
    })
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    system_prompt = build_system_prompt(gender)
    
    # –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    history = user_memory.get(user_id, [])
    messages = [
        {"role": "system", "content": system_prompt},
        *history[-15:],
        {"role": "user", "content": text}
    ]
    
    # –ó–∞–ø—Ä–æ—Å –∫ OpenAI
    try:
        response = openai.chat.completions.create(
            model=char_config["model"],
            messages=messages,
            temperature=char_config["temperature"]
        )
        if not response.choices[0].message.content:
            return "–ß–µ—Ç —É –º–µ–Ω—è –≥–ª—é–∫. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑."
        
        reply = response.choices[0].message.content.strip()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø–∞–º—è—Ç—å
        user_memory[user_id].append({"role": "assistant", "content": reply})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ
        if (message_counter[user_id] % random.randint(10, 15) == 0 and 
                promo_messages):
            promo = random.choice(promo_messages)
            reply = f"{reply}\n\n{promo}"
        
        return reply
    except Exception:
        return "–ß–µ—Ç —É –º–µ–Ω—è –≥–ª—é–∫. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑."


# --- –ó–∞–ø—É—Å–∫ ---
def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("reset", reset))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, 
                                  handle_message))
    app.run_polling()


if __name__ == "__main__":
    main()