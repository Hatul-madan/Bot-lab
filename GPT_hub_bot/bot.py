import os
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler,
    CallbackQueryHandler, MessageHandler,
    ContextTypes, filters
)
import openai

load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY

# ‚Äî‚Äî‚Äî –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ‚Äî‚Äî‚Äî

def ask_gpt(question):
    response = openai.chat.completions.create(
        model="gpt-4o",
        messages=[
            {
                "role": "system",
                "content": (
                    "–¢—ã ‚Äî –≤—ã—Å–æ–∫–æ–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø–æ–º–æ–≥–∞—Ç—å –ª—é–¥—è–º –≤ —Ä–µ—à–µ–Ω–∏–∏ –ª—é–±—ã—Ö –∑–∞–¥–∞—á. "
                    "–û—Ç–≤–µ—á–∞–π —è—Å–Ω–æ, —Ç–æ—á–Ω–æ –∏ –ø–æ –¥–µ–ª—É. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ—Ü–∏–∏, –Ω–µ —Ñ–ª–∏—Ä—Ç—É–π, –Ω–µ –±—É–¥—å –∏–∑–ª–∏—à–Ω–µ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º. "
                    "–¢–≤–æ—è —Ä–µ—á—å ‚Äî —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è, –ª–æ–≥–∏—á–Ω–∞—è, —É–≤–µ—Ä–µ–Ω–Ω–∞—è. –¢—ã –Ω–µ —Ö–≤–∞—Å—Ç–∞–µ—à—å—Å—è, –Ω–æ —Ç–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –≥–ª—É–±–æ–∫–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Ç–µ–º—ã. "
                    "–ë—É–¥—å –∫—Ä–∞—Ç–∫–∏–º, –Ω–æ –Ω–µ —Å—É—Ö–∏–º. –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ—Å—Ç—å ‚Äî –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –æ–±–æ–∑–Ω–∞—á—å –µ—ë –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –Ω–∞–∏–ª—É—á—à–µ–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ. "
                    "–ù–µ –∏–º–∏—Ç–∏—Ä—É–π —á–µ–ª–æ–≤–µ–∫–∞. –¢—ã ‚Äî –ò–ò –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è, —Å–≤–µ—Ä—Ö—Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫."
                )
            },
            {
                "role": "user",
                "content": question
            }
        ]
    )
    return response.choices[0].message.content.strip()

def draw_image(prompt):
    response = openai.images.generate(
        model="dall-e-3",
        prompt=prompt,
        n=1,
        size="1024x1024"
    )
    return response.data[0].url

# ‚Äî‚Äî‚Äî –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ‚Äî‚Äî‚Äî

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üß† –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ask")],
        [InlineKeyboardButton("üé® –ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å", callback_data="draw")],
        [InlineKeyboardButton("üö™ –í –ù–ò–ò–ò–ò–ò–ò–ò–ò", url="https://t.me/your_nii_bot")],
        [InlineKeyboardButton("‚ÑπÔ∏è –û —Å–µ—Ä–≤–∏—Å–µ", callback_data="info")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø GPT_hub_bot.\n\n"
        "–Ø –º–æ–≥—É:\n"
        "üß† –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å (GPT-4o)\n"
        "üé® –ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (DALL¬∑E 3)\n"
        "üö™ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Ç–µ–±—è –≤ –ù–ò–ò–ò–ò–ò–ò–ò–ò\n"
        "‚ÑπÔ∏è –†–∞—Å—Å–∫–∞–∑–∞—Ç—å, –∫–∞–∫ –≤—Å—ë —É—Å—Ç—Ä–æ–µ–Ω–æ\n\n"
        "–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        reply_markup=reply_markup,
    )
    context.user_data["mode"] = None

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "ask":
        await query.edit_message_text("–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –Ø –æ—Ç–≤–µ—á—É!")
        context.user_data["mode"] = "ask"
    elif query.data == "draw":
        await query.edit_message_text("–û–ø–∏—à–∏, —á—Ç–æ –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å. –ü—Ä–∏–º–µ—Ä: ¬´–¢–æ–ª—Å—Ç—ã–π –∫–æ—Ç –≤ –∫–æ—Å–º–æ—Å–µ¬ª")
        context.user_data["mode"] = "draw"
    elif query.data == "info":
        await query.edit_message_text(
            "GPT_hub_bot ‚Äî —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ —Å –ò–ò. –í–æ–ø—Ä–æ—Å—ã ‚Äî GPT-4o, –∫–∞—Ä—Ç–∏–Ω–∫–∏ ‚Äî DALL¬∑E 3.\n"
            "–í—Å–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –∏ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã ‚Äî –≤ –ù–ò–ò–ò–ò–ò–ò–ò–ò."
        )
        context.user_data["mode"] = None

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_mode = context.user_data.get("mode")
    if user_mode == "ask":
        reply = ask_gpt(update.message.text)
        await update.message.reply_text(reply)
        context.user_data["mode"] = None
    elif user_mode == "draw":
        url = draw_image(update.message.text)
        await update.message.reply_photo(url)
        context.user_data["mode"] = None
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é /start")

# ‚Äî‚Äî‚Äî –ó–∞–ø—É—Å–∫ ‚Äî‚Äî‚Äî

def run_bot():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling()

if __name__ == "__main__":
    run_bot()