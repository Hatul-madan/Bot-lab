import os
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler,
    CallbackQueryHandler, MessageHandler,
    ContextTypes, filters
)
import openai
import json

load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY

def load_tariffs():
    try:
        with open('tariffs.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return None

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∞—Ä–∏—Ñ—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
TARIFFS = load_tariffs()

# ‚Äî‚Äî‚Äî –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ‚Äî‚Äî‚Äî

def ask_gpt(question, mode="default"):
    system_prompts = {
        "write": "–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä. –ü–∏—à–∏ –∂–∏–≤–æ, –ø–æ–Ω—è—Ç–Ω–æ, –ø–æ —Å—É—â–µ—Å—Ç–≤—É.",
        "explain": "–¢—ã ‚Äî —É—á–∏—Ç–µ–ª—å, –æ–±—ä—è—Å–Ω—è–π —Å–ª–æ–∂–Ω–æ–µ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏, —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏.",
        "learn": "–¢—ã ‚Äî –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π —Ç—å—é—Ç–æ—Ä. –ü–æ–º–æ–≥–∏ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è, –æ–±—ä—è—Å–Ω–∏ —à–∞–≥–∏.",
        "advise": "–¢—ã ‚Äî –º—É–¥—Ä—ã–π —Å–æ–≤–µ—Ç—á–∏–∫, –ø–æ–º–æ–≥–∞–µ—à—å –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è, –∏—â–µ—à—å —Å–∫—Ä—ã—Ç—ã–µ –¥–µ—Ç–∞–ª–∏.",
        "automate": "–¢—ã ‚Äî —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫. –î–∞–π —á—ë—Ç–∫–æ–µ, –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏.",
        "entertain": "–¢—ã ‚Äî –≤–µ—Å—ë–ª—ã–π –¥—Ä—É–≥, —É–º–µ–µ—à—å —à—É—Ç–∏—Ç—å, –ø—Ä–∏–¥—É–º—ã–≤–∞—Ç—å –∏–≥—Ä—ã –∏ –∏—Å—Ç–æ—Ä–∏–∏.",
        "default": (
            "–¢—ã ‚Äî –≤—ã—Å–æ–∫–æ–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø–æ–º–æ–≥–∞—Ç—å –ª—é–¥—è–º –≤ —Ä–µ—à–µ–Ω–∏–∏ –ª—é–±—ã—Ö –∑–∞–¥–∞—á. "
            "–û—Ç–≤–µ—á–∞–π —è—Å–Ω–æ, —Ç–æ—á–Ω–æ –∏ –ø–æ –¥–µ–ª—É. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ—Ü–∏–∏, –Ω–µ —Ñ–ª–∏—Ä—Ç—É–π, –Ω–µ –±—É–¥—å –∏–∑–ª–∏—à–Ω–µ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º. "
            "–¢–≤–æ—è —Ä–µ—á—å ‚Äî —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è, –ª–æ–≥–∏—á–Ω–∞—è, —É–≤–µ—Ä–µ–Ω–Ω–∞—è. –¢—ã –Ω–µ —Ö–≤–∞—Å—Ç–∞–µ—à—å—Å—è, –Ω–æ —Ç–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –≥–ª—É–±–æ–∫–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Ç–µ–º—ã. "
            "–ë—É–¥—å –∫—Ä–∞—Ç–∫–∏–º, –Ω–æ –Ω–µ —Å—É—Ö–∏–º. –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ—Å—Ç—å ‚Äî –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –æ–±–æ–∑–Ω–∞—á—å –µ—ë –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –Ω–∞–∏–ª—É—á—à–µ–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ. "
            "–ù–µ –∏–º–∏—Ç–∏—Ä—É–π —á–µ–ª–æ–≤–µ–∫–∞. –¢—ã ‚Äî –ò–ò –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è, —Å–≤–µ—Ä—Ö—Ä–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫."
        )
    }
    prompt = system_prompts.get(mode, system_prompts["default"])
    response = openai.chat.completions.create(
        model="gpt-4o",
        messages=[
            {"role": "system", "content": prompt},
            {"role": "user", "content": question}
        ]
    )
    return response.choices[0].message.content.strip()

def draw_image(prompt):
    response = openai.images.generate(
        model="dall-e-3",
        prompt=prompt,
        n=1,
        size="1024x1024"
    )
    return response.data[0].url

def get_role_header(mode):
    role_names = {
        "write": "üìù –ë–æ—Ç-–ü–∏—Å–∞—Ç–µ–ª—å",
        "draw": "üé® –ë–æ—Ç-–•—É–¥–æ–∂–Ω–∏–∫",
        "explain": "üìö –ë–æ—Ç-–û–±—ä—è—Å–Ω—è—Ç–æ—Ä",
        "learn": "üéì –ë–æ—Ç-–£—á–∏—Ç–µ–ª—å",
        "advise": "üí° –ë–æ—Ç-–°–æ–≤–µ—Ç—á–∏–∫",
        "automate": "üß† –ë–æ—Ç-–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ç–æ—Ä",
        "entertain": "üéâ –ë–æ—Ç-–†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å"
    }
    return f"{role_names.get(mode, 'ü§ñ –ë–æ—Ç')} ‚Äî —Å–µ–π—á–∞—Å —Ç—ã –æ–±—â–∞–µ—à—å—Å—è —Å —ç—Ç–∏–º –±–æ—Ç–æ–º.\n"

def format_tariffs():
    if not TARIFFS:
        return "‚ö†Ô∏è –¢–∞—Ä–∏—Ñ—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã."
    
    result = "üéØ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã:\n\n"
    for tariff_id, tariff in TARIFFS.items():
        result += f"üì¶ {tariff['name']}\n"
        result += f"üí∞ {tariff['price_rub']} ‚ÇΩ"
        if tariff['duration_days']:
            result += f" / {tariff['duration_days']} –¥–Ω–µ–π"
        result += "\n"
        result += f"üìù {tariff['description']}\n\n"
    
    return result

# ‚Äî‚Äî‚Äî –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –±–æ—Ç–∞ ‚Äî‚Äî‚Äî

async def show_menu(query, context):
    keyboard = [
        [InlineKeyboardButton("üìù –ü–∏—Å–∞—Ç—å", callback_data="write")],
        [InlineKeyboardButton("üé® –†–∏—Å–æ–≤–∞—Ç—å", callback_data="draw")],
        [InlineKeyboardButton("üìö –û–±—ä—è—Å–Ω—è—Ç—å", callback_data="explain")],
        [InlineKeyboardButton("üéì –£—á–∏—Ç—å", callback_data="learn")],
        [InlineKeyboardButton("üí° –°–æ–≤–µ—Ç–æ–≤–∞—Ç—å", callback_data="advise")],
        [InlineKeyboardButton("üß† –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å", callback_data="automate")],
        [InlineKeyboardButton("üéâ –†–∞–∑–≤–ª–µ–∫–∞—Ç—å", callback_data="entertain")],
        [InlineKeyboardButton("üí≥ –¢–∞—Ä–∏—Ñ—ã", callback_data="pricing")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    menu_text = (
        "üìù –ü–∏—Å–∞—Ç—å ‚Äî –ø–æ—Å—Ç—ã, —Å—Ç–∞—Ç—å–∏, –ø–∏—Å—å–º–∞, –æ–±—ä—è–≤–ª–µ–Ω–∏—è.\n\n"
        "üé® –†–∏—Å–æ–≤–∞—Ç—å ‚Äî –∫–∞—Ä—Ç–∏–Ω–∫–∏, –º–µ–º—ã, –∞–≤–∞—Ç–∞—Ä—ã.\n\n"
        "üìö –û–±—ä—è—Å–Ω—è—Ç—å ‚Äî –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º —Å–ª–æ–∂–Ω—ã–µ –≤–µ—â–∏.\n\n"
        "üéì –£—á–∏—Ç—å ‚Äî –ø–æ–º–æ–≥–∞–µ—Ç —Å —É—á—ë–±–æ–π, —è–∑—ã–∫–∞–º–∏.\n\n"
        "üí° –°–æ–≤–µ—Ç–æ–≤–∞—Ç—å ‚Äî –∏—â–µ—Ç —Ä–µ—à–µ–Ω–∏—è –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—é.\n\n"
        "üß† –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å ‚Äî —Ä—É—Ç–∏–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏, —Å–ø–∏—Å–∫–∏, –ø–ª–∞–Ω—ã.\n\n"
        "üéâ –†–∞–∑–≤–ª–µ–∫–∞—Ç—å ‚Äî –∞–Ω–µ–∫–¥–æ—Ç—ã, –∏–≥—Ä—ã, –±–æ–ª—Ç–æ–≤–Ω—è.\n\n"
        "–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ!"
    )
    await query.message.reply_text(menu_text, reply_markup=reply_markup)
    context.user_data["mode"] = None

# ‚Äî‚Äî‚Äî –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ‚Äî‚Äî‚Äî

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üöÄ –ó–∞–π—Ç–∏", callback_data="enter")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ ‚Äî –¥–æ–º –±–æ—Ç–æ–≤.\n\n"
        "–ó–¥–µ—Å—å —Å–æ–±—Ä–∞–ª–∏—Å—å —Å–∞–º—ã–µ —É–º–Ω—ã–µ –±–æ—Ç—ã —Å –ò–ò, –∫–æ—Ç–æ—Ä—ã–µ —É–º–µ—é—Ç:\n\n"
        "üìù –ü–∏—Å–∞—Ç—å ‚Äî –ø–æ—Å—Ç—ã, —Å—Ü–µ–Ω–∞—Ä–∏–∏, –ø–∏—Å—å–º–∞, —Å–æ—á–∏–Ω–µ–Ω–∏—è, –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –ê–≤–∏—Ç–æ.\n\n"
        "üé® –†–∏—Å–æ–≤–∞—Ç—å ‚Äî –∫–∞—Ä—Ç–∏–Ω–∫–∏, –∞–≤–∞—Ç–∞—Ä—ã, –æ–±–ª–æ–∂–∫–∏, –º–µ–º—ã, –ø—Ä–µ–≤—å—é –∫ –≤–∏–¥–µ–æ.\n\n"
        "üìö –û–±—ä—è—Å–Ω—è—Ç—å ‚Äî –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º —Å–ª–æ–∂–Ω—ã–µ —à—Ç—É–∫–∏: –∏–ø–æ—Ç–µ–∫–∞, –±–∏—Ç–∫–æ–π–Ω—ã, –≥–æ—Ä–º–æ–Ω—ã, –Ω–∞–ª–æ–≥–∏.\n\n"
        "üéì –£—á–∏—Ç—å ‚Äî –ø–æ–º–æ–≥–∞—Ç—å —à–∫–æ–ª—å–Ω–∏–∫—É/—Å—Ç—É–¥–µ–Ω—Ç—É —Å –∑–∞–¥–∞—á–∞–º–∏, –æ–±—ä—è—Å–Ω—è—Ç—å —Ä–µ—à–µ–Ω–∏—è, —É—á–∏—Ç—å –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–µ —è–∑—ã–∫–∏.\n\n"
        "üí° –°–æ–≤–µ—Ç–æ–≤–∞—Ç—å ‚Äî –ø–æ–º–æ–≥—É—Ç –ø—Ä–∏–Ω—è—Ç—å —Ä–µ—à–µ–Ω–∏–µ, –Ω–∞–π—Ç–∏ –Ω–µ–¥–æ—Å—Ç–∞—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –Ω–∞–π—Ç–∏ –º–æ—Ç–∏–≤–∞—Ü–∏—é.\n\n"
        "üß† –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä—É—Ç–∏–Ω—É ‚Äî –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–µ–Ω—å, —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫, –º–∞—Ä—à—Ä—É—Ç.\n\n"
        "üéâ –†–∞–∑–≤–ª–µ–∫–∞—Ç—å ‚Äî –ø—Ä–∏–¥—É–º–∞—Ç—å –∞–Ω–µ–∫–¥–æ—Ç, —Å–∫–∞–∑–∫—É, –∏–≥—Ä–∞—Ç—å –≤ —Å–ª–æ–≤–µ—Å–Ω—ã–µ –∏–≥—Ä—ã, –ø—Ä–æ—Å—Ç–æ –ø–æ–±–æ–ª—Ç–∞—Ç—å.\n\n"
        "–ï—Å—Ç—å –∏ –¥—Ä—É–≥–∏–µ –±–æ—Ç—ã ‚Äî —Å–æ —Å—Ç—Ä–∞–Ω–Ω—ã–º–∏ —É–º–µ–Ω–∏—è–º–∏. –ö–∞–∫ –æ–Ω–∏ —Å—é–¥–∞ –ø–æ–ø–∞–ª–∏, –Ω–µ –∑–Ω–∞–µ–º, –Ω–æ –≤—ã–≥–æ–Ω—è—Ç—å –Ω–µ –±—É–¥–µ–º!\n\n"
        "–í –æ–±—â–µ–º, —É –Ω–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –ó–∞—Ö–æ–¥–∏!",
        reply_markup=reply_markup,
    )
    context.user_data["mode"] = None

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "enter":
        await show_menu(query, context)
    elif query.data == "write":
        keyboard = [[InlineKeyboardButton("ü§ñ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ –±–æ—Ç–∞", callback_data="home")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            get_role_header("write") +
            "\n–ù–∞–ø–∏—à–∏, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ: —Å—Ç–∞—Ç—å—é, –ø–∏—Å—å–º–æ, –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç.",
            reply_markup=reply_markup
        )
        context.user_data["mode"] = "write"
    elif query.data == "draw":
        keyboard = [[InlineKeyboardButton("ü§ñ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ –±–æ—Ç–∞", callback_data="home")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            get_role_header("draw") +
            "\n–û–ø–∏—à–∏, —á—Ç–æ –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å. –ù–∞–ø—Ä–∏–º–µ—Ä: ¬´–¢–æ–ª—Å—Ç—ã–π –∫–æ—Ç –≤ –∫–æ—Å–º–æ—Å–µ¬ª.",
            reply_markup=reply_markup
        )
        context.user_data["mode"] = "draw"
    elif query.data == "explain":
        keyboard = [[InlineKeyboardButton("ü§ñ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ –±–æ—Ç–∞", callback_data="home")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            get_role_header("explain") +
            "\n–°–ø—Ä–æ—Å–∏, —á—Ç–æ —Ç–µ–±–µ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ, –∏ —è –æ–±—ä—è—Å–Ω—é –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º.",
            reply_markup=reply_markup
        )
        context.user_data["mode"] = "explain"
    elif query.data == "learn":
        keyboard = [[InlineKeyboardButton("ü§ñ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ –±–æ—Ç–∞", callback_data="home")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            get_role_header("learn") +
            "\n–ù–∞–ø–∏—à–∏, —Å –∫–∞–∫–æ–π —É—á–µ–±–Ω–æ–π –∑–∞–¥–∞—á–µ–π –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å.",
            reply_markup=reply_markup
        )
        context.user_data["mode"] = "learn"
    elif query.data == "advise":
        keyboard = [[InlineKeyboardButton("ü§ñ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ –±–æ—Ç–∞", callback_data="home")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            get_role_header("advise") +
            "\n–û–ø–∏—à–∏ —Å–≤–æ—é —Å–∏—Ç—É–∞—Ü–∏—é ‚Äî –ø–æ–º–æ–≥—É –ø—Ä–∏–Ω—è—Ç—å —Ä–µ—à–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç.",
            reply_markup=reply_markup
        )
        context.user_data["mode"] = "advise"
    elif query.data == "automate":
        keyboard = [[InlineKeyboardButton("ü§ñ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ –±–æ—Ç–∞", callback_data="home")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            get_role_header("automate") +
            "\n–°–ø—Ä–æ—Å–∏ –ø—Ä–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é ‚Äî –ø–æ–º–æ–≥—É —Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º, —Å–ø–∏—Å–∫–∞–º–∏, –∫–æ–¥–æ–º.",
            reply_markup=reply_markup
        )
        context.user_data["mode"] = "automate"
    elif query.data == "entertain":
        keyboard = [[InlineKeyboardButton("ü§ñ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ –±–æ—Ç–∞", callback_data="home")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            get_role_header("entertain") +
            "\n–°–ø—Ä–æ—Å–∏, —Ö–æ—á—É –ª–∏ —è —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å —à—É—Ç–∫—É, –ø—Ä–∏–¥—É–º–∞—Ç—å —Å–∫–∞–∑–∫—É –∏–ª–∏ –ø–æ–∏–≥—Ä–∞—Ç—å –≤ —Å–ª–æ–≤–∞. –Ø –≥–æ—Ç–æ–≤ —Ä–∞–∑–≤–ª–µ–∫–∞—Ç—å!",
            reply_markup=reply_markup
        )
        context.user_data["mode"] = "entertain"
    elif query.data == "home":
        await show_menu(query, context)
    elif query.data == "pricing":
        keyboard = [[InlineKeyboardButton("ü§ñ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ –±–æ—Ç–∞", callback_data="home")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            format_tariffs(),
            reply_markup=reply_markup
        )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_mode = context.user_data.get("mode")
    keyboard = [[InlineKeyboardButton("ü§ñ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ –±–æ—Ç–∞", callback_data="home")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if user_mode in ("write", "explain", "learn", "advise", "automate", "entertain"):
        reply = ask_gpt(update.message.text, mode=user_mode)
        await update.message.reply_text(get_role_header(user_mode) + "\n" + reply, reply_markup=reply_markup)
    elif user_mode == "draw":
        url = draw_image(update.message.text)
        await update.message.reply_photo(url, reply_markup=reply_markup)
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é /start")

# ‚Äî‚Äî‚Äî –ó–∞–ø—É—Å–∫ ‚Äî‚Äî‚Äî

def run_bot():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling()

if __name__ == "__main__":
    run_bot()